* PBUI

** Introduction

   PBUI is a Presentation Based User Interface for Emacs.

   This is work in progress.

** Installation

   #+BEGIN_SRC emacs-lisp

   (push "/home/marian/src/pbui/" load-path)

   (use-package pbui
     :bind
     (("C-c x SPC" . toggle-presentation-selected-at-point)
      ("C-c x X" . select-presentation-at-point-and-run-command)
      ("C-c x <deletechar>" . reset-presentation-command-arguments)
      ("C-c x x" . run-presentations-command)
      ("C-<return>" . global-pbui-mode)))
   
   #+END_SRC

** Usage

   The way *PBUI* works is by letting the user select the presentations he wants to work on first, then run a command that works over those presentations.

   An example of that could be to first select a bunch of files and a directory, then run some command that works with those arguments, like *Move files to directory* or *Copy files to directory*.

*** PBUI mode

    The global *PBUI* mode is enabled via *global-pbui-mode* Emacs command (bound to *C-<return>* if you used the configuration above).

    *PBUI* implements a modal interface with combination-free keybindings for operating on presentations available in buffers.
    
    The *PBUI* mode highlights presentations available in buffers when mouse is hovered over them or the keyboard cursor is moved to their position.

    Presentations are selected/unselected using *toggle-presentation-selected-at-point* Emacs command (bound to *space* key when *PBUI* mode is active, or by using the mouse middle click).

    After selecting presentations, use *x* key to run a command with the selected presentations as arguments.

    To clear the list of selected presentations use *DEL* key.

    To exit the global *PBUI* mode use *ESC* key.

    [[file:docs/pbui.png]]

** Demo application

    A presentation based demo application is included. It is a contacts management application that uses presentations for displaying contacts data.

    #+BEGIN_SRC emacs-lisp
      (require 'pbui-contacts-app)
    #+END_SRC

    Then run *contacts-app* Emacs command to start the application.

    Once the application start, enter *PBUI* mode. Select presentations and run commands.
    
** Dired extension

    *PBUI* includes a *Dired* extension that makes Dired presentation based.

    To install:
    
    #+BEGIN_SRC emacs-lisp
      (require 'pbui-dired)
    #+END_SRC

    After that, after entering *PBUI* mode, *Dired* files are highlighted as presentations.

    [[file:docs/dired.png]]

** Combining presentations from different applications

    A very powerful aspect of Presentation Based User Interfaces is that presentations can be combined between applications.

    As an example, try selecting files in Dired (after enabling *PBUI* mode). Then select some users from the contacts demo application.
    Finally hit *x* and choose *Send files by email* command (this needs Thunderbird on Linux at the moment).

** Developing Presentation Based applications with PBUI

*** Inserting presentations in buffers
   
   A presentation associates graphical output with application objects.
   In *PBUI* that is done via Emacs text properties; a text property named *presentation* is attached to the inserted buffer text.
   The property value is a property list with *type* and *value* keys. *value* can contain any application object; that's the object associated to the presentation.
   *type* has the type of the presented object.

   Some examples of this:

   - presentation for an email object:

     #+begin_src emacs-lisp
       (insert (propertize "john@mail.com" 'presentation '(type email value "john@mail.com")))
     #+end_src

   - presentation for a file object:

     #+begin_src emacs-lisp
       (insert (propertize "/usr/bin/foo" 'presentation '(type file value "/usr/bin/foo")))
     #+end_src

*** Defining commands

    Presented object are processed using commands that work on those presented objects (presentation commands).
    Presentation commands are defined using *def-presentation-command* macro.
    Only those command that match the types of the selected presented objects are made available to the user for execution.

    For example, this is the implemention of a presentation command for copying a selected file to a selected directory:
    
    #+begin_src emacs-lisp
    (def-presentation-command (standard-commands:copy-file-to-directory
                           :title "Copy file to directory"
                           :description "Copy file to directory")
      ((file file) (dir directory))
      (copy-file file dir)
      (message "File copied to directory"))
    #+end_src    
    
** References
   - Presentation Based User Interfaces - Ciccarelli, Eugene C.
   - User Interface Management Systems: The CLIM Perspective - Ralf MÃ¶ller.
   - An Implementation of CLIM Presentation Types - Timothy Moore.
   - Holland, Simon & Oppenheim, Daniel. (1999). Direct Combination.. 262-269.
